name: Build and Deploy Sphinx Docs (No Symlinks/Hardlinks, Check Size)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------------------------
      # 1) Checkout Repository & Set Up Python
      # -------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt

      # -------------------------
      # 2) Build Sphinx Documentation
      # -------------------------
      - name: Build Sphinx documentation
        run: |
          sphinx-build -b html docs/source docs/build/html

      # -------------------------
      # 3) Remove Symlinks/Hardlinks
      # -------------------------
      - name: Remove symlinks and hard links
        run: |
          echo "[INFO] Removing symlinks and hard links..."
          mkdir -p docs/build/final
          cp -rL docs/build/html/* docs/build/final
          rm -rf docs/build/html
          mv docs/build/final docs/build/html
          echo "[INFO] Link removal done."

      # -------------------------
      # 4) Debug: Verify No Links and Check Size
      # -------------------------
      - name: Debug file structure
        run: |
          echo "=== Check for symlinks (should be none) ==="
          find docs/build/html -type l -exec ls -la {} \; || true

          echo "=== Check for repeated inodes (possible hard links) ==="
          find docs/build/html -type f -printf '%i %p\n' | sort | uniq -c | awk '$1 > 1 {print $2}'

          echo "=== Check total size of docs/build/html ==="
          du -sh docs/build/html

      # (Optional) Create .nojekyll File: Prevent GitHub Pages from Ignoring Directories Starting with '_'
      - name: Create .nojekyll
        run: echo > docs/build/html/.nojekyll

      # -------------------------
      # 5) Upload Artifact
      # -------------------------
      - name: Upload artifact (github-pages)
        uses: actions/upload-artifact@v4
        with:
          name: github-pages   # actions/deploy-pages@v4 will look for this artifact
          path: docs/build/html

  # -------------------------
  # Deploy Job
  # -------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        # No additional input needed; will automatically detect and deploy the "github-pages" artifact

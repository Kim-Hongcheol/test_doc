name: Build and Deploy Sphinx Docs (No Symlinks/Hardlinks, Check Size)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------------------------
      # 1) 저장소 체크아웃 & Python 설정
      # -------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt

      # -------------------------
      # 2) Sphinx 빌드
      # -------------------------
      - name: Build Sphinx documentation
        run: |
          sphinx-build -b html docs/source docs/build/html

      # -------------------------
      # 3) symlink/hardlink 제거
      # -------------------------
      - name: Convert any links to normal files (cp -rL)
        run: |
          echo "[INFO] Removing symlinks/hardlinks..."
          mkdir -p docs/build/final
          cp -rL docs/build/html/* docs/build/final
          rm -rf docs/build/html
          mv docs/build/final docs/build/html
          echo "[INFO] Link removal done."

      # -------------------------
      # 4) 디버그: symlink, 하드링크, 용량 확인
      # -------------------------
      - name: Debug file structure
        run: |
          echo "=== Check for symlinks (should be none) ==="
          find docs/build/html -type l -exec ls -la {} \; || true

          echo "=== Check for repeated inodes (possible hardlinks) ==="
          ls -aliR docs/build/html | sort | uniq -c | sort -nr | head -30

          echo "=== Check total size of docs/build/html ==="
          du -sh docs/build/html

      # (선택) Jekyll 무시 파일 생성: _static 등 '_' 디렉터리 무시 방지
      - name: Create .nojekyll
        run: echo > docs/build/html/.nojekyll

      # -------------------------
      # 5) 아티팩트 업로드
      # -------------------------
      - name: Upload artifact (github-pages)
        uses: actions/upload-artifact@v4
        with:
          name: github-pages   # actions/deploy-pages@v4가 찾을 아티팩트 이름
          path: docs/build/html

  # -------------------------
  # 배포 Job
  # -------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        # 별도 입력값 없이, "github-pages" 아티팩트 자동 인식하여 배포
